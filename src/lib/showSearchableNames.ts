import { supabase } from './supabase';

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á queue_items
export const showSearchableNames = async () => {
  console.log('üîç ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á queue_items...');
  
  try {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å queue_items
    const { data: queueData, error } = await supabase
      .from('queue_items')
      .select('queue_number, roblox_username, customer_name, contact_info, assigned_code')
      .order('created_at', { ascending: false })
      .limit(20);
    
    if (error) {
      console.error('‚ùå Error loading queue data:', error);
      return;
    }
    
    if (!queueData || queueData.length === 0) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á queue_items');
      return;
    }
    
    console.log('üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á queue_items:', queueData.length, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
    console.log('üìã ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏î‡πâ:');
    console.log('='.repeat(80));
    
    queueData.forEach((item, index) => {
      console.log(`\n${index + 1}. ‡∏Ñ‡∏¥‡∏ß #${item.queue_number}`);
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å roblox_username
      if (item.roblox_username) {
        console.log(`   üéÆ Roblox Username: "${item.roblox_username}"`);
      }
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å customer_name
      if (item.customer_name) {
        console.log(`   üë§ Customer Name: "${item.customer_name}"`);
      }
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å contact_info
      if (item.contact_info) {
        const nameMatch = item.contact_info.match(/‡∏ä‡∏∑‡πà‡∏≠:\s*([^|]+)/)?.[1]?.trim();
        if (nameMatch) {
          console.log(`   üìù ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô Contact: "${nameMatch}"`);
        }
        
        const usernameMatch = item.contact_info.match(/Username:\s*([^|]+)/)?.[1]?.trim();
        if (usernameMatch) {
          console.log(`   üè∑Ô∏è Username ‡πÉ‡∏ô Contact: "${usernameMatch}"`);
        }
      }
      
      // ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏Ñ‡πâ‡∏î
      if (item.assigned_code) {
        console.log(`   üé´ Assigned Code: "${item.assigned_code}"`);
      }
      
      // ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å contact_info
      if (item.contact_info) {
        const codeMatch = item.contact_info.match(/Code:\s*([^|]+)/)?.[1]?.trim();
        if (codeMatch) {
          console.log(`   üîë Code ‡πÉ‡∏ô Contact: "${codeMatch}"`);
        }
      }
      
      console.log('   ' + '-'.repeat(60));
    });
    
    // ‡∏™‡∏£‡∏∏‡∏õ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏î‡πâ
    const searchableNames = new Set<string>();
    const searchableCodes = new Set<string>();
    
    queueData.forEach(item => {
      if (item.roblox_username) searchableNames.add(item.roblox_username);
      if (item.customer_name) searchableNames.add(item.customer_name);
      
      if (item.contact_info) {
        const nameMatch = item.contact_info.match(/‡∏ä‡∏∑‡πà‡∏≠:\s*([^|]+)/)?.[1]?.trim();
        if (nameMatch) searchableNames.add(nameMatch);
        
        const usernameMatch = item.contact_info.match(/Username:\s*([^|]+)/)?.[1]?.trim();
        if (usernameMatch) searchableNames.add(usernameMatch);
        
        const codeMatch = item.contact_info.match(/Code:\s*([^|]+)/)?.[1]?.trim();
        if (codeMatch) searchableCodes.add(codeMatch);
      }
      
      if (item.assigned_code) searchableCodes.add(item.assigned_code);
    });
    
    console.log('\nüéØ ‡∏™‡∏£‡∏∏‡∏õ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏î‡πâ:');
    console.log('='.repeat(80));
    
    if (searchableNames.size > 0) {
      console.log('\nüë§ ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏î‡πâ:');
      Array.from(searchableNames).forEach((name, index) => {
        console.log(`   ${index + 1}. "${name}"`);
      });
    }
    
    if (searchableCodes.size > 0) {
      console.log('\nüé´ ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏î‡πâ:');
      Array.from(searchableCodes).forEach((code, index) => {
        console.log(`   ${index + 1}. "${code}"`);
      });
    }
    
    console.log('\nüí° ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ:');
    console.log('   - ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß: 123');
    console.log('   - ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡πÄ‡∏Å‡∏°: PlayerName');
    console.log('   - ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏Ñ‡πâ‡∏î: 50BXJK258J');
    
  } catch (error) {
    console.error('‚ùå Error in showSearchableNames:', error);
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞
export const searchSpecificName = async (searchTerm: string) => {
  console.log(`üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠ "${searchTerm}" ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á queue_items...`);
  
  const searchLower = searchTerm.toLowerCase().trim();
  
  try {
    const { data: queueData, error } = await supabase
      .from('queue_items')
      .select('*')
      .or(`queue_number.eq.${searchTerm},roblox_username.ilike.%${searchLower}%,contact_info.ilike.%${searchLower}%,assigned_code.ilike.%${searchLower}%,customer_name.ilike.%${searchLower}%`);
    
    if (error) {
      console.error('‚ùå Error searching:', error);
      return [];
    }
    
    if (!queueData || queueData.length === 0) {
      console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö "${searchTerm}"`);
      return [];
    }
    
    console.log(`‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${queueData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:`);
    queueData.forEach((item, index) => {
      console.log(`\n${index + 1}. ‡∏Ñ‡∏¥‡∏ß #${item.queue_number}`);
      console.log(`   - Status: ${item.status}`);
      console.log(`   - Product: ${item.product_type}`);
      console.log(`   - Username: ${item.roblox_username || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);
      console.log(`   - Contact: ${item.contact_info}`);
      if (item.assigned_code) {
        console.log(`   - Code: ${item.assigned_code}`);
      }
    });
    
    return queueData;
    
  } catch (error) {
    console.error('‚ùå Error in searchSpecificName:', error);
    return [];
  }
};









