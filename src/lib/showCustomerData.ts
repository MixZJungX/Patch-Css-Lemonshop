import { supabase } from './supabase';

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• customer_name ‡πÅ‡∏•‡∏∞ contact_info
export const showCustomerData = async () => {
  console.log('üîç ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• customer_name ‡πÅ‡∏•‡∏∞ contact_info...');
  
  try {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å queue_items
    const { data: queueData, error } = await supabase
      .from('queue_items')
      .select('queue_number, customer_name, contact_info, roblox_username, status, created_at')
      .order('created_at', { ascending: false })
      .limit(20);
    
    if (error) {
      console.error('‚ùå Error loading queue data:', error);
      return;
    }
    
    if (!queueData || queueData.length === 0) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á queue_items');
      return;
    }
    
    console.log('üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á queue_items:', queueData.length, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
    console.log('üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• customer_name ‡πÅ‡∏•‡∏∞ contact_info:');
    console.log('='.repeat(100));
    
    queueData.forEach((item, index) => {
      console.log(`\n${index + 1}. ‡∏Ñ‡∏¥‡∏ß #${item.queue_number} (${item.status})`);
      console.log(`   üìÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${new Date(item.created_at).toLocaleString('th-TH')}`);
      
      // ‡πÅ‡∏™‡∏î‡∏á customer_name
      if (item.customer_name) {
        console.log(`   üë§ Customer Name: "${item.customer_name}"`);
      } else {
        console.log(`   üë§ Customer Name: [‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•]`);
      }
      
      // ‡πÅ‡∏™‡∏î‡∏á roblox_username
      if (item.roblox_username) {
        console.log(`   üéÆ Roblox Username: "${item.roblox_username}"`);
      } else {
        console.log(`   üéÆ Roblox Username: [‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•]`);
      }
      
      // ‡πÅ‡∏™‡∏î‡∏á contact_info
      if (item.contact_info) {
        console.log(`   üìù Contact Info: "${item.contact_info}"`);
        
        // ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô contact_info
        const contactParts = item.contact_info.split('|');
        if (contactParts.length > 1) {
          console.log(`   üìã ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Contact Info:`);
          contactParts.forEach((part, partIndex) => {
            const trimmedPart = part.trim();
            if (trimmedPart) {
              console.log(`      ${partIndex + 1}. ${trimmedPart}`);
            }
          });
        }
      } else {
        console.log(`   üìù Contact Info: [‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•]`);
      }
      
      console.log('   ' + '-'.repeat(80));
    });
    
    // ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    console.log('\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:');
    console.log('='.repeat(100));
    
    const hasCustomerName = queueData.filter(item => item.customer_name).length;
    const hasRobloxUsername = queueData.filter(item => item.roblox_username).length;
    const hasContactInfo = queueData.filter(item => item.contact_info).length;
    
    console.log(`üë§ ‡∏°‡∏µ Customer Name: ${hasCustomerName}/${queueData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    console.log(`üéÆ ‡∏°‡∏µ Roblox Username: ${hasRobloxUsername}/${queueData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    console.log(`üìù ‡∏°‡∏µ Contact Info: ${hasContactInfo}/${queueData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á customer_name
    const customerNames = queueData
      .filter(item => item.customer_name)
      .map(item => item.customer_name)
      .slice(0, 10);
    
    if (customerNames.length > 0) {
      console.log('\nüë§ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Customer Names:');
      customerNames.forEach((name, index) => {
        console.log(`   ${index + 1}. "${name}"`);
      });
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á roblox_username
    const robloxUsernames = queueData
      .filter(item => item.roblox_username)
      .map(item => item.roblox_username)
      .slice(0, 10);
    
    if (robloxUsernames.length > 0) {
      console.log('\nüéÆ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Roblox Usernames:');
      robloxUsernames.forEach((username, index) => {
        console.log(`   ${index + 1}. "${username}"`);
      });
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á contact_info
    const contactInfos = queueData
      .filter(item => item.contact_info)
      .map(item => item.contact_info)
      .slice(0, 5);
    
    if (contactInfos.length > 0) {
      console.log('\nüìù ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Contact Info:');
      contactInfos.forEach((contact, index) => {
        console.log(`   ${index + 1}. "${contact}"`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå Error in showCustomerData:', error);
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞
export const searchCustomerData = async (searchTerm: string) => {
  console.log(`üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• "${searchTerm}" ‡πÉ‡∏ô customer_name ‡πÅ‡∏•‡∏∞ contact_info...`);
  
  const searchLower = searchTerm.toLowerCase().trim();
  
  try {
    const { data: queueData, error } = await supabase
      .from('queue_items')
      .select('*')
      .or(`customer_name.ilike.%${searchLower}%,contact_info.ilike.%${searchLower}%,roblox_username.ilike.%${searchLower}%`);
    
    if (error) {
      console.error('‚ùå Error searching:', error);
      return [];
    }
    
    if (!queueData || queueData.length === 0) {
      console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö "${searchTerm}"`);
      return [];
    }
    
    console.log(`‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${queueData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:`);
    queueData.forEach((item, index) => {
      console.log(`\n${index + 1}. ‡∏Ñ‡∏¥‡∏ß #${item.queue_number} (${item.status})`);
      console.log(`   üë§ Customer Name: ${item.customer_name || '[‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•]'}`);
      console.log(`   üéÆ Roblox Username: ${item.roblox_username || '[‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•]'}`);
      console.log(`   üìù Contact Info: ${item.contact_info || '[‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•]'}`);
      console.log(`   üìÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${new Date(item.created_at).toLocaleString('th-TH')}`);
    });
    
    return queueData;
    
  } catch (error) {
    console.error('‚ùå Error in searchCustomerData:', error);
    return [];
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
export const analyzeDataPatterns = async () => {
  console.log('üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• customer_name ‡πÅ‡∏•‡∏∞ contact_info...');
  
  try {
    const { data: queueData, error } = await supabase
      .from('queue_items')
      .select('customer_name, contact_info, roblox_username')
      .limit(50);
    
    if (error) {
      console.error('‚ùå Error loading data:', error);
      return;
    }
    
    if (!queueData || queueData.length === 0) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
      return;
    }
    
    console.log('üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:');
    console.log('='.repeat(80));
    
    // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå customer_name
    const customerNamePatterns = new Map<string, number>();
    const robloxUsernamePatterns = new Map<string, number>();
    const contactInfoPatterns = new Map<string, number>();
    
    queueData.forEach(item => {
      // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå customer_name
      if (item.customer_name) {
        const pattern = item.customer_name.length > 10 ? '‡∏¢‡∏≤‡∏ß (>10 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)' : '‡∏™‡∏±‡πâ‡∏ô (‚â§10 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)';
        customerNamePatterns.set(pattern, (customerNamePatterns.get(pattern) || 0) + 1);
      }
      
      // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå roblox_username
      if (item.roblox_username) {
        const pattern = item.roblox_username.length > 10 ? '‡∏¢‡∏≤‡∏ß (>10 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)' : '‡∏™‡∏±‡πâ‡∏ô (‚â§10 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)';
        robloxUsernamePatterns.set(pattern, (robloxUsernamePatterns.get(pattern) || 0) + 1);
      }
      
      // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå contact_info
      if (item.contact_info) {
        const hasName = item.contact_info.includes('‡∏ä‡∏∑‡πà‡∏≠:') || item.contact_info.includes('Username:');
        const hasPhone = item.contact_info.includes('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:') || item.contact_info.includes('Phone:');
        const hasCode = item.contact_info.includes('Code:');
        const hasPassword = item.contact_info.includes('Password:');
        
        if (hasName) contactInfoPatterns.set('‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠', (contactInfoPatterns.get('‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠') || 0) + 1);
        if (hasPhone) contactInfoPatterns.set('‡∏°‡∏µ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£', (contactInfoPatterns.get('‡∏°‡∏µ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£') || 0) + 1);
        if (hasCode) contactInfoPatterns.set('‡∏°‡∏µ‡πÇ‡∏Ñ‡πâ‡∏î', (contactInfoPatterns.get('‡∏°‡∏µ‡πÇ‡∏Ñ‡πâ‡∏î') || 0) + 1);
        if (hasPassword) contactInfoPatterns.set('‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô', (contactInfoPatterns.get('‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô') || 0) + 1);
      }
    });
    
    console.log('\nüë§ ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Customer Name:');
    customerNamePatterns.forEach((count, pattern) => {
      console.log(`   ${pattern}: ${count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    });
    
    console.log('\nüéÆ ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Roblox Username:');
    robloxUsernamePatterns.forEach((count, pattern) => {
      console.log(`   ${pattern}: ${count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    });
    
    console.log('\nüìù ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Contact Info:');
    contactInfoPatterns.forEach((count, pattern) => {
      console.log(`   ${pattern}: ${count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    });
    
  } catch (error) {
    console.error('‚ùå Error in analyzeDataPatterns:', error);
  }
};









