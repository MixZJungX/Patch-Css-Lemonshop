import { supabase } from './supabase';
import { QueueItem, QueueDisplay } from '@/types';

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
export const testQueueConnection = async (): Promise<boolean> => {
  try {
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÇ‡∏î‡∏¢‡∏î‡∏π‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    const { data, error } = await supabase
      .from('queue_items')
      .select('id, queue_number, status, created_at')
      .limit(1);
    
    if (error) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ï‡∏≤‡∏£‡∏≤‡∏á queue_items ‡πÑ‡∏î‡πâ:', error);
      console.error('‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î error:', {
        code: error.code,
        message: error.message,
        details: error.details,
        hint: error.hint
      });
      return false;
    }
    
    console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ï‡∏≤‡∏£‡∏≤‡∏á queue_items ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    return true;
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠:', error);
    return false;
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß
export const testQueueNumberGeneration = async (): Promise<boolean> => {
  try {
    const queueNumber = await generateQueueNumber();
    console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${queueNumber}`);
    return true;
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß:', error);
    return false;
  }
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
export const generateQueueNumber = async (): Promise<number> => {
  // ‡∏î‡∏∂‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏î)
  const { data: maxQueue, error } = await supabase
    .from('queue_items')
    .select('queue_number')
    .order('queue_number', { ascending: false })
    .limit(1)
    .single();

  if (error && error.code !== 'PGRST116') {
    throw error;
  }

  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏¥‡∏ß‡πÉ‡∏î‡πÜ ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà 1
  if (!maxQueue) {
    return 1;
  }

  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏¥‡∏ß‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° 1
  return maxQueue.queue_number + 1;
};

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏¥‡∏ß‡πÉ‡∏´‡∏°‡πà
export const addToQueue = async (queueData: any): Promise<any> => {
  let attempts = 0;
  const maxAttempts = 3;
  
  while (attempts < maxAttempts) {
    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
      const queueNumber = await generateQueueNumber();

      const newQueueItem = {
        ...queueData,
        queue_number: queueNumber,
        status: 'waiting',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };

      console.log('üìù ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á:', newQueueItem);

      const { data, error } = await supabase
        .from('queue_items')
        .insert(newQueueItem)
        .select()
        .single();

      if (error) {
        console.error('‚ùå Error creating queue:', error);
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î error ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á duplicate key ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
        if (error.code === '23505' && attempts < maxAttempts - 1) {
          console.log(`‚ö†Ô∏è ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß ${queueNumber} ‡∏ã‡πâ‡∏≥ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...`);
          attempts++;
          // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
          await new Promise(resolve => setTimeout(resolve, 100));
          continue;
        }
        throw error;
      }
      
      console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏¥‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', data);
      return data;
    } catch (error) {
      console.error('‚ùå Error in addToQueue:', error);
      if (attempts >= maxAttempts - 1) {
        throw error;
      }
      attempts++;
      await new Promise(resolve => setTimeout(resolve, 100));
    }
  }
  
  throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
};

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á
export const getQueueDisplay = async (): Promise<QueueDisplay> => {
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß
  const { data: waitingItems, error: waitingError } = await supabase
    .from('queue_items')
    .select('*')
    .eq('status', 'waiting')
    .order('created_at', { ascending: true })
    .limit(10);

  if (waitingError) {
    console.warn('‚ö†Ô∏è Error fetching waiting items:', waitingError);
    // ‡πÑ‡∏°‡πà throw error ‡πÅ‡∏ï‡πà‡πÉ‡∏ä‡πâ empty array ‡πÅ‡∏ó‡∏ô
  }

  const { data: processingItem, error: processingError } = await supabase
    .from('queue_items')
    .select('*')
    .eq('status', 'processing')
    .order('updated_at', { ascending: true })
    .limit(1)
    .maybeSingle();

  if (processingError) {
    console.warn('‚ö†Ô∏è Error fetching processing item:', processingError);
    // ‡πÑ‡∏°‡πà throw error ‡πÅ‡∏ï‡πà‡πÉ‡∏ä‡πâ null ‡πÅ‡∏ó‡∏ô
  }

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• redemption requests
  const { data: redemptionData, error: redemptionError } = await supabase
    .from('app_284beb8f90_redemption_requests')
    .select('*');

  if (redemptionError) throw redemptionError;

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const enrichQueueData = (queueItems: any[]) => {
    return queueItems?.map(queueItem => {
      const matchingRedemption = redemptionData?.find(redemption => {
        const queueUsername = queueItem.contact_info.match(/‡∏ä‡∏∑‡πà‡∏≠:\s*([^|]+)/)?.[1]?.trim();
        
        // ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏ö‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ
        return queueItem.contact_info.includes(redemption.roblox_username) ||
               queueUsername === redemption.roblox_username ||
               queueItem.customer_name === redemption.roblox_username ||
               (queueItem.contact_info.includes('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:') && redemption.contact_info.includes('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:') && 
                queueItem.contact_info.match(/‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:\s*([^|]+)/)?.[1]?.trim() === 
                redemption.contact_info.match(/‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:\s*([^|]+)/)?.[1]?.trim()) ||
               (queueItem.contact_info.includes('Code:') && redemption.assigned_code && 
                queueItem.contact_info.includes(redemption.assigned_code));
      });

      // Fallback: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å contact_info ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô redemption_requests
      // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: "Code: 50BXJK258J | Password: 123456780 | Phone: 0821695505"
      let passwordFromContact = null;
      let codeFromContact = null;
      
      // ‡∏•‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö regex
      if (queueItem.contact_info.includes('Password:')) {
        passwordFromContact = queueItem.contact_info.match(/Password:\s*([^|]+)/)?.[1]?.trim() ||
                             queueItem.contact_info.match(/Password:\s*([^\s|]+)/)?.[1]?.trim() ||
                             queueItem.contact_info.match(/Password:\s*(.+?)(?:\s*\||$)/)?.[1]?.trim();
      }
      
      if (queueItem.contact_info.includes('Code:')) {
        codeFromContact = queueItem.contact_info.match(/Code:\s*([^|]+)/)?.[1]?.trim() ||
                         queueItem.contact_info.match(/Code:\s*([^\s|]+)/)?.[1]?.trim() ||
                         queueItem.contact_info.match(/Code:\s*(.+?)(?:\s*\||$)/)?.[1]?.trim();
      }
      
      return {
        ...queueItem,
        roblox_username: matchingRedemption?.roblox_username || queueItem.roblox_username,
        // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å contact_info ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å (100% ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô contact_info)
        roblox_password: passwordFromContact || matchingRedemption?.roblox_password || queueItem.roblox_password,
        robux_amount: matchingRedemption?.robux_amount || queueItem.robux_amount,
        assigned_code: codeFromContact || matchingRedemption?.assigned_code || queueItem.assigned_code,
        assigned_account_code: matchingRedemption?.assigned_account_code || queueItem.assigned_account_code,
        code_id: matchingRedemption?.code_id || queueItem.code_id
      };
    }) || [];
  };

  const enrichedWaitingItems = enrichQueueData(waitingItems || []);
  const enrichedProcessingItem = processingItem ? enrichQueueData([processingItem])[0] : undefined;
  const next3Items = enrichedWaitingItems.slice(0, 3);
  const totalWaiting = enrichedWaitingItems.length;
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì (‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ 5 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ï‡πà‡∏≠‡∏Ñ‡∏¥‡∏ß)
  const averageWaitTime = totalWaiting * 5;

  return {
    current_processing: enrichedProcessingItem,
    next_3_items: next3Items,
    total_waiting: totalWaiting,
    average_wait_time: averageWaitTime
  };
};

// ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏¥‡∏ß‡∏à‡∏≤‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß
export const checkQueueStatus = async (queueNumber: number): Promise<QueueItem | null> => {
  const { data: queueData, error } = await supabase
    .from('queue_items')
    .select('*')
    .eq('queue_number', queueNumber)
    .single();

  if (error) {
    if (error.code === 'PGRST116') return null; // ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    throw error;
  }

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• redemption requests
  const { data: redemptionData, error: redemptionError } = await supabase
    .from('app_284beb8f90_redemption_requests')
    .select('*');

  if (redemptionError) {
    console.warn('‚ö†Ô∏è Error fetching redemption data:', redemptionError);
    // ‡πÑ‡∏°‡πà throw error ‡πÅ‡∏ï‡πà‡πÉ‡∏ä‡πâ empty array ‡πÅ‡∏ó‡∏ô
  }

  // ‡∏´‡∏≤ redemption request ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
  const matchingRedemption = redemptionData?.find(redemption => {
    const queueUsername = queueData.contact_info.match(/‡∏ä‡∏∑‡πà‡∏≠:\s*([^|]+)/)?.[1]?.trim();
    
    // ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏ö‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ
    return queueData.contact_info.includes(redemption.roblox_username) ||
           queueUsername === redemption.roblox_username ||
           queueData.customer_name === redemption.roblox_username ||
           (queueData.contact_info.includes('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:') && redemption.contact_info.includes('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:') && 
            queueData.contact_info.match(/‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:\s*([^|]+)/)?.[1]?.trim() === 
            redemption.contact_info.match(/‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:\s*([^|]+)/)?.[1]?.trim()) ||
           (queueData.contact_info.includes('Code:') && redemption.assigned_code && 
            queueData.contact_info.includes(redemption.assigned_code));
  });

  // Fallback: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å contact_info ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô redemption_requests
  // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: "Code: 50BXJK258J | Password: 123456780 | Phone: 0821695505"
  let passwordFromContact = null;
  let codeFromContact = null;
  
  // ‡∏•‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö regex
  if (queueData.contact_info.includes('Password:')) {
    passwordFromContact = queueData.contact_info.match(/Password:\s*([^|]+)/)?.[1]?.trim() ||
                         queueData.contact_info.match(/Password:\s*([^\s|]+)/)?.[1]?.trim() ||
                         queueData.contact_info.match(/Password:\s*(.+?)(?:\s*\||$)/)?.[1]?.trim();
  }
  
  if (queueData.contact_info.includes('Code:')) {
    codeFromContact = queueData.contact_info.match(/Code:\s*([^|]+)/)?.[1]?.trim() ||
                     queueData.contact_info.match(/Code:\s*([^\s|]+)/)?.[1]?.trim() ||
                     queueData.contact_info.match(/Code:\s*(.+?)(?:\s*\||$)/)?.[1]?.trim();
  }
  
  return {
    ...queueData,
    roblox_username: matchingRedemption?.roblox_username || queueData.roblox_username,
    // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å contact_info ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å (100% ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô contact_info)
    roblox_password: passwordFromContact || matchingRedemption?.roblox_password || queueData.roblox_password,
    robux_amount: matchingRedemption?.robux_amount || queueData.robux_amount,
    assigned_code: codeFromContact || matchingRedemption?.assigned_code || queueData.assigned_code,
    assigned_account_code: matchingRedemption?.assigned_account_code || queueData.assigned_account_code,
    code_id: matchingRedemption?.code_id || queueData.code_id
  };
};

// ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ñ‡∏¥‡∏ß (‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà)
export const getQueuePosition = async (queueNumber: number): Promise<number> => {
  const { data: waitingItems, error } = await supabase
    .from('queue_items')
    .select('queue_number')
    .eq('status', 'waiting')
    .order('queue_number', { ascending: true });

  if (error) throw error;

  const position = waitingItems?.findIndex(item => item.queue_number === queueNumber);
  return position !== -1 ? position + 1 : 0; // +1 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ index ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà 0
};

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏¥‡∏ß (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)
export const updateQueueStatus = async (
  queueId: string, 
  status: QueueItem['status'],
  adminNotes?: string
): Promise<QueueItem> => {
  const updateData: any = {
    status,
    updated_at: new Date().toISOString()
  };

  if (adminNotes) {
    updateData.admin_notes = adminNotes;
  }

  const { data, error } = await supabase
    .from('queue_items')
    .update(updateData)
    .eq('id', queueId)
    .select()
    .single();

  if (error) throw error;
  return data;
};

// ‡∏¢‡πâ‡∏≤‡∏¢‡∏Ñ‡∏¥‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô-‡∏•‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)
export const moveQueueItem = async (queueId: string, direction: 'up' | 'down'): Promise<void> => {
  // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏£‡∏≠
  const { data: allWaiting, error: fetchError } = await supabase
    .from('queue_items')
    .select('id, created_at')
    .eq('status', 'waiting')
    .order('created_at', { ascending: true });

  if (fetchError) throw fetchError;

  const currentIndex = allWaiting?.findIndex(item => item.id === queueId);
  if (currentIndex === -1 || !allWaiting) throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢');

  let targetIndex: number;
  if (direction === 'up' && currentIndex > 0) {
    targetIndex = currentIndex - 1;
  } else if (direction === 'down' && currentIndex < allWaiting.length - 1) {
    targetIndex = currentIndex + 1;
  } else {
    throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≤‡∏¢‡∏Ñ‡∏¥‡∏ß‡πÑ‡∏î‡πâ');
  }

  // ‡∏™‡∏•‡∏±‡∏ö‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï created_at
  const currentItem = allWaiting[currentIndex];
  const targetItem = allWaiting[targetIndex];

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡∏≥‡∏î‡∏±‡∏ö
  await supabase
    .from('queue_items')
    .update({ 
      created_at: targetItem.created_at,
      updated_at: new Date().toISOString()
    })
    .eq('id', currentItem.id);

  await supabase
    .from('queue_items')
    .update({ 
      created_at: currentItem.created_at,
      updated_at: new Date().toISOString()
    })
    .eq('id', targetItem.id);
};

// ‡∏•‡∏ö‡∏Ñ‡∏¥‡∏ß (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)
export const deleteQueueItem = async (queueId: string): Promise<void> => {
  const { error } = await supabase
    .from('queue_items')
    .delete()
    .eq('id', queueId);

  if (error) throw error;
};

// ‡∏î‡∏∂‡∏á‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)
export const getAllQueueItems = async (): Promise<QueueItem[]> => {
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß
  const { data: queueData, error: queueError } = await supabase
    .from('queue_items')
    .select('*')
    .order('created_at', { ascending: true });

  if (queueError) {
    console.warn('‚ö†Ô∏è Error fetching all queue items:', queueError);
    return []; // return empty array instead of throwing
  }

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• redemption requests
  const { data: redemptionData, error: redemptionError } = await supabase
    .from('app_284beb8f90_redemption_requests')
    .select('*')
    .order('created_at', { ascending: true });

  if (redemptionError) {
    console.warn('‚ö†Ô∏è Error fetching redemption data in getAllQueueItems:', redemptionError);
    return queueData || []; // return queue data only if redemption fails
  }

  console.log('üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤:', {
    queueData: queueData?.length,
    redemptionData: redemptionData?.length,
    sampleQueue: queueData?.[0],
    sampleRedemption: redemptionData?.[0]
  });

  // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏à‡∏≤‡∏Å contact_info ‡∏´‡∏£‡∏∑‡∏≠ customer_name
  const enrichedData = queueData?.map(queueItem => {
    // ‡∏´‡∏≤ redemption request ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô - ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
    const matchingRedemption = redemptionData?.find(redemption => {
      // ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏à‡∏≤‡∏Å username ‡πÉ‡∏ô contact_info
      const queueUsername = queueItem.contact_info?.match(/‡∏ä‡∏∑‡πà‡∏≠:\s*([^|]+)/)?.[1]?.trim();
      
      // ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏ö‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ
      return (
        // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: username ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô contact_info
        queueItem.contact_info?.includes(redemption.roblox_username) ||
        // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: username ‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô
        queueUsername === redemption.roblox_username ||
        // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3: customer_name ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö username (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        queueItem.customer_name === redemption.roblox_username ||
        // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 4: ‡∏î‡∏π‡∏à‡∏≤‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
        (queueItem.contact_info?.includes('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:') && redemption.contact_info?.includes('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:') && 
         queueItem.contact_info.match(/‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:\s*([^|]+)/)?.[1]?.trim() === 
         redemption.contact_info.match(/‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:\s*([^|]+)/)?.[1]?.trim()) ||
        // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 5: ‡∏î‡∏π‡∏à‡∏≤‡∏Å Code ‡πÉ‡∏ô contact_info
        (queueItem.contact_info?.includes('Code:') && redemption.assigned_code && 
         queueItem.contact_info.includes(redemption.assigned_code))
      );
    });

    // Fallback: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å contact_info ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô redemption_requests
    // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: "Code: 50BXJK258J | Password: 123456780 | Phone: 0821695505"
    const sourceContact = matchingRedemption?.contact_info || queueItem.contact_info;
    let passwordFromContact = null;
    let codeFromContact = null;
    
    // ‡∏•‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö regex ‡∏à‡∏≤‡∏Å sourceContact
    if (sourceContact && sourceContact.includes('Password:')) {
      passwordFromContact = sourceContact.match(/Password:\s*([^|]+)/)?.[1]?.trim() ||
                           sourceContact.match(/Password:\s*([^\s|]+)/)?.[1]?.trim() ||
                           sourceContact.match(/Password:\s*(.+?)(?:\s*\||$)/)?.[1]?.trim();
    }
    
    if (sourceContact && sourceContact.includes('Code:')) {
      codeFromContact = sourceContact.match(/Code:\s*([^|]+)/)?.[1]?.trim() ||
                       sourceContact.match(/Code:\s*([^\s|]+)/)?.[1]?.trim() ||
                       sourceContact.match(/Code:\s*(.+?)(?:\s*\||$)/)?.[1]?.trim();
    }
    
    // ‡∏•‡∏ö console.log ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î log spam
    
    const result = {
      ...queueItem,
      roblox_username: matchingRedemption?.roblox_username || queueItem.roblox_username,
      // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å contact_info ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å (100% ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô contact_info)
      roblox_password: passwordFromContact || matchingRedemption?.roblox_password || queueItem.roblox_password,
      robux_amount: matchingRedemption?.robux_amount || queueItem.robux_amount,
      assigned_code: codeFromContact || matchingRedemption?.assigned_code || queueItem.assigned_code,
      assigned_account_code: matchingRedemption?.assigned_account_code || queueItem.assigned_account_code,
      code_id: matchingRedemption?.code_id || queueItem.code_id
    };
    
    return result;
  }) || [];
  
  return enrichedData;
};

// ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏¥‡∏ß‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡πÄ‡∏Å‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏Ñ‡πâ‡∏î (‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å queue_items ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
export const searchQueueByGameInfo = async (searchTerm: string): Promise<QueueItem[]> => {
  if (!searchTerm.trim()) return [];

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ search term ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞ underscore
  const normalizedSearchTerm = searchTerm.trim();
  const searchLower = normalizedSearchTerm.toLowerCase();
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö
  const searchVariants = [
    searchLower,
    searchLower.replace(/\s+/g, '_'),  // ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô underscore
    searchLower.replace(/_/g, ' '),    // ‡πÅ‡∏õ‡∏•‡∏á underscore ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
  ].filter((variant, index, self) => self.indexOf(variant) === index); // ‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡∏ã‡πâ‡∏≥

  console.log('üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏¥‡∏ß‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:', searchTerm);
  console.log('üîç ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:', searchVariants);

  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô queue_items ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß - ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢
  // ‡πÅ‡∏¢‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á error
  let queueData = [];
  let error = null;

  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÑ‡∏°‡πà‡∏Ñ‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß)
  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    try {
      // ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏î‡πâ‡∏ß‡∏¢ variants ‡∏ï‡πà‡∏≤‡∏á‡πÜ
      const searchPromises = searchVariants.map(async (variant) => {
        try {
          // Escape special characters ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PostgreSQL
          const escapedVariant = variant.replace(/[%_\\]/g, '\\$&');
          
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ variant ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
          if (!escapedVariant || escapedVariant.trim() === '') {
            return { data: [], error: null };
          }
          
          const result = await supabase
            .from('queue_items')
            .select('*')
            .or(`roblox_username.ilike.%${escapedVariant}%,contact_info.ilike.%${escapedVariant}%,assigned_code.ilike.%${escapedVariant}%,customer_name.ilike.%${escapedVariant}%`);
          
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ result ‡∏°‡∏µ error ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          if (result.error) {
            console.warn(`‚ö†Ô∏è Warning searching with variant "${variant}":`, result.error.message);
            return { data: [], error: null }; // ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á error ‡∏ï‡πà‡∏≠
          }
          
          return result;
        } catch (err) {
          console.warn(`‚ö†Ô∏è Warning searching with variant "${variant}":`, err.message);
          return { data: [], error: null }; // ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á error ‡∏ï‡πà‡∏≠
        }
      });

      const results = await Promise.all(searchPromises);
      
      // ‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
      const allResults = results
        .filter(result => !result.error && result.data)
        .flatMap(result => result.data || []);
      
      // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥
      const uniqueResults = allResults.filter((item, index, self) => 
        index === self.findIndex(t => t.id === item.id)
      );
      
      queueData = uniqueResults;
      error = null;
      
      console.log(`‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡∏û‡∏ö ${uniqueResults.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
      
      // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ
      if (uniqueResults.length === 0) {
        console.log('üîÑ ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ...');
        try {
          const simpleResult = await supabase
            .from('queue_items')
            .select('*')
            .ilike('contact_info', `%${searchLower}%`);
          
          if (simpleResult.error) {
            console.warn('‚ö†Ô∏è Warning in simple search:', simpleResult.error.message);
          } else if (simpleResult.data && simpleResult.data.length > 0) {
            queueData = simpleResult.data;
            console.log(`‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡∏û‡∏ö ${simpleResult.data.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
          }
        } catch (simpleError) {
          console.warn('‚ö†Ô∏è Warning in simple search:', simpleError.message);
        }
      }
    } catch (textError) {
      console.error('‚ùå Error in text search:', textError);
      error = textError;
      queueData = null;
    }

  if (error) {
    console.warn('‚ö†Ô∏è Warning searching queue:', error.message || error);
    return [];
  }

  console.log('‚úÖ ‡∏û‡∏ö‡∏Ñ‡∏¥‡∏ß:', queueData?.length || 0, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
  
  if (queueData && queueData.length > 0) {
    console.log('üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏û‡∏ö:');
    queueData.forEach((item, index) => {
      console.log(`${index + 1}. ‡∏Ñ‡∏¥‡∏ß #${item.queue_number} - ${item.roblox_username || item.customer_name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠'}`);
    });
  }

  // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô QueueItem format
  const queueItems: QueueItem[] = (queueData || []).map(item => {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å contact_info
    const username = item.contact_info.match(/‡∏ä‡∏∑‡πà‡∏≠:\s*([^|]+)/)?.[1]?.trim() || 
                    item.contact_info.match(/Username:\s*([^|]+)/)?.[1]?.trim() ||
                    item.roblox_username ||
                    item.customer_name;
    
    const password = item.contact_info.match(/Password:\s*([^|]+)/)?.[1]?.trim();
    const code = item.contact_info.match(/Code:\s*([^|]+)/)?.[1]?.trim();
    const robux = item.contact_info.match(/Robux:\s*([^|]+)/)?.[1]?.trim();

    return {
      ...item,
      roblox_username: username,
      roblox_password: password,
      assigned_code: item.assigned_code || code,
      robux_amount: robux
    };
  });

  return queueItems;
};
