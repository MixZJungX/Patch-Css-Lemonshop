import { supabase } from './supabase';

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß‡∏à‡∏≤‡∏Å redemption request
export const findQueueNumberForRedemption = async (redemptionData: any) => {
  console.log('üîç ‡∏´‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö redemption:', redemptionData.roblox_username);
  
  try {
    // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å contact_info ‡∏ó‡∏µ‡πà‡∏°‡∏µ username ‡πÅ‡∏ö‡∏ö exact match
    const { data: queueData1, error: error1 } = await supabase
      .from('queue_items')
      .select('queue_number, id, contact_info')
      .or(`contact_info.ilike.${redemptionData.roblox_username}`)
      .limit(5);
    
    if (!error1 && queueData1 && queueData1.length > 0) {
      console.log('‚úÖ ‡∏û‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß‡∏à‡∏≤‡∏Å contact_info:', queueData1);
      return queueData1[0]; // ‡πÄ‡∏≠‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
    }
    
    // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
    const phoneMatch = redemptionData.contact_info.match(/Phone:\s*([^|]+)/)?.[1]?.trim() ||
                      redemptionData.contact_info.match(/(\d{10,})/)?.[1];
    
    if (phoneMatch) {
      const { data: queueData2, error: error2 } = await supabase
        .from('queue_items')
        .select('queue_number, id, contact_info')
        .or(`contact_info.ilike.${phoneMatch}`)
        .limit(5);
      
      if (!error2 && queueData2 && queueData2.length > 0) {
        console.log('‚úÖ ‡∏û‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß‡∏à‡∏≤‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:', queueData2);
        return queueData2[0];
      }
    }
    
    // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å Code
    const codeMatch = redemptionData.contact_info.match(/Code:\s*([^|]+)/)?.[1]?.trim();
    
    if (codeMatch) {
      const { data: queueData3, error: error3 } = await supabase
        .from('queue_items')
        .select('queue_number, id, contact_info')
        .or(`contact_info.ilike.${codeMatch}`)
        .limit(5);
      
      if (!error3 && queueData3 && queueData3.length > 0) {
        console.log('‚úÖ ‡∏û‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß‡∏à‡∏≤‡∏Å Code:', queueData3);
        return queueData3[0];
      }
    }
    
    // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 4: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å assigned_code
    if (redemptionData.assigned_code) {
      const { data: queueData4, error: error4 } = await supabase
        .from('queue_items')
        .select('queue_number, id, contact_info')
        .or(`assigned_code.ilike.${redemptionData.assigned_code}`)
        .limit(5);
      
      if (!error4 && queueData4 && queueData4.length > 0) {
        console.log('‚úÖ ‡∏û‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß‡∏à‡∏≤‡∏Å assigned_code:', queueData4);
        return queueData4[0];
      }
    }
    
    console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á');
    return null;
    
  } catch (error) {
    console.error('‚ùå Error in findQueueNumberForRedemption:', error);
    return null;
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ "JarnBanG"
export const showAllJarnBanGQueues = async () => {
  console.log('üîç ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ "JarnBanG"...');
  
  try {
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô queue_items
    const { data: queueData, error: queueError } = await supabase
      .from('queue_items')
      .select('*')
      .or(`contact_info.ilike.%jarnbang%`);
    
    if (queueError) {
      console.error('‚ùå Error searching queue_items:', queueError);
    } else {
      console.log('üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô queue_items:', queueData?.length || 0, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
      if (queueData && queueData.length > 0) {
        console.log('üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏ß:');
        queueData.forEach((item, index) => {
          console.log(`${index + 1}. Queue #${item.queue_number}`);
          console.log(`   - Contact: ${item.contact_info}`);
          console.log(`   - Status: ${item.status}`);
          console.log(`   - Created: ${item.created_at}`);
          console.log('---');
        });
      }
    }
    
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô redemption_requests
    const { data: redemptionData, error: redemptionError } = await supabase
      .from('app_284beb8f90_redemption_requests')
      .select('*')
      .or(`roblox_username.ilike.%jarnbang%,contact_info.ilike.%jarnbang%`);
    
    if (redemptionError) {
      console.error('‚ùå Error searching redemption_requests:', redemptionError);
    } else {
      console.log('üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô redemption_requests:', redemptionData?.length || 0, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
      if (redemptionData && redemptionData.length > 0) {
        console.log('üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ redemption:');
        redemptionData.forEach((item, index) => {
          console.log(`${index + 1}. ID: ${item.id}`);
          console.log(`   - Username: ${item.roblox_username}`);
          console.log(`   - Contact: ${item.contact_info}`);
          console.log(`   - Status: ${item.status}`);
          console.log(`   - Created: ${item.created_at}`);
          console.log('---');
        });
      }
    }
    
  } catch (error) {
    console.error('‚ùå Error in showAllJarnBanGQueues:', error);
  }
};
