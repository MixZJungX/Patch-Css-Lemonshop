import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { QueueItem } from '@/types';
import { getAllQueueItems, updateQueueStatus, deleteQueueItem } from '@/lib/queueApi';
import { supabase } from '@/lib/supabase';
import { toast } from 'sonner';
import { Play, CheckCircle, XCircle, Clock, RefreshCw, Edit, MessageSquare, Trash2, Search, X, AlertCircle, CheckSquare, Square, Settings } from 'lucide-react';
import { Checkbox } from '@/components/ui/checkbox';

export default function QueueManager() {
  const [queueItems, setQueueItems] = useState<QueueItem[]>([]);
  const [filteredItems, setFilteredItems] = useState<QueueItem[]>([]);
  const [activeFilter, setActiveFilter] = useState<'all' | 'waiting' | 'processing' | 'completed' | 'cancelled' | 'problem' | 'customer_fixed'>('all');
  const [problemTypeFilter, setProblemTypeFilter] = useState<'all' | 'map_verification' | 'phone_verification' | 'email_verification' | 'wrong_password'>('all');
  const [loading, setLoading] = useState(true);
  const [selectedItem, setSelectedItem] = useState<QueueItem | null>(null);
  const [editDialogOpen, setEditDialogOpen] = useState(false);
  const [newStatus, setNewStatus] = useState<string>('');
  const [adminNotes, setAdminNotes] = useState<string>('');
  const [updating, setUpdating] = useState(false);
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [itemToDelete, setItemToDelete] = useState<QueueItem | null>(null);
  const [deleting, setDeleting] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  
  // Bulk update states
  const [selectedItems, setSelectedItems] = useState<Set<string>>(new Set());
  const [bulkUpdateDialogOpen, setBulkUpdateDialogOpen] = useState(false);
  const [bulkStatus, setBulkStatus] = useState<string>('');
  const [bulkNotes, setBulkNotes] = useState<string>('');
  const [bulkUpdating, setBulkUpdating] = useState(false);
  
  // Edit problem type states
  const [editProblemDialogOpen, setEditProblemDialogOpen] = useState(false);
  const [editingItem, setEditingItem] = useState<QueueItem | null>(null);
  const [newProblemType, setNewProblemType] = useState<string>('');

  const loadQueueItems = async () => {
    try {
      setLoading(true);
      const items = await getAllQueueItems();
      setQueueItems(items);
    } catch (error) {
      console.error('Error loading queue items:', error);
      toast.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏¥‡∏ß‡πÑ‡∏î‡πâ');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadQueueItems();
    const interval = setInterval(loadQueueItems, 30000);
    return () => clearInterval(interval);
  }, []);

  const getStatusInfo = (status: string) => {
    switch (status) {
      case 'waiting': return { icon: <Clock className="w-4 h-4" />, color: 'bg-yellow-500', text: '‡∏£‡∏≠' };
      case 'processing': return { icon: <Play className="w-4 h-4" />, color: 'bg-blue-500', text: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£' };
      case 'completed': return { icon: <CheckCircle className="w-4 h-4" />, color: 'bg-green-500', text: '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô' };
      case 'cancelled': return { icon: <XCircle className="w-4 h-4" />, color: 'bg-red-500', text: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å' };
      case 'problem': return { icon: <AlertCircle className="w-4 h-4" />, color: 'bg-orange-500', text: '‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤' };
      case 'customer_fixed': return { icon: <CheckCircle className="w-4 h-4" />, color: 'bg-emerald-500', text: '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß' };
      default: return { icon: <Clock className="w-4 h-4" />, color: 'bg-gray-500', text: '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö' };
    }
  };

  const getProductTypeInfo = (type: string) => {
    switch (type) {
      case 'robux': return { icon: 'üéÆ', name: 'Robux' };
      case 'chicken': return { icon: 'üêî', name: 'Chicken' };
      case 'rainbow': return { icon: 'üåà', name: 'Rainbow Six' };
      default: return { icon: 'üì¶', name: '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤' };
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleString('th-TH', {
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const waitingCount = queueItems.filter(item => item.status === 'waiting').length;
  const processingCount = queueItems.filter(item => item.status === 'processing').length;
  const completedCount = queueItems.filter(item => item.status === 'completed').length;
  const cancelledCount = queueItems.filter(item => item.status === 'cancelled').length;
  const problemCount = queueItems.filter(item => item.status === 'problem').length;
  const customerFixedCount = queueItems.filter((item: any) => item.status === 'customer_fixed').length;
  
  // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
  const mapVerificationCount = queueItems.filter(item => 
    item.status === 'problem' && item.admin_notes?.includes('‡∏ï‡∏¥‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏°‡∏û')
  ).length;
  const phoneVerificationCount = queueItems.filter(item => 
    item.status === 'problem' && item.admin_notes?.includes('‡∏ï‡∏¥‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå')
  ).length;
  const emailVerificationCount = queueItems.filter(item => 
    item.status === 'problem' && item.admin_notes?.includes('‡∏ï‡∏¥‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏°‡∏•')
  ).length;
  const wrongPasswordCount = queueItems.filter(item => 
    item.status === 'problem' && item.admin_notes?.includes('‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏¥‡∏î')
  ).length;

  // Filter items based on active filter, problem type filter and search term
  useEffect(() => {
    let filtered = queueItems;
    
    // Apply status filter
    if (activeFilter !== 'all') {
      filtered = filtered.filter(item => item.status === activeFilter);
    }
    
    // Apply problem type filter (only when status is 'problem')
    if (activeFilter === 'problem' && problemTypeFilter !== 'all') {
      filtered = filtered.filter(item => {
        if (item.status !== 'problem' || !item.admin_notes) return false;
        
        switch (problemTypeFilter) {
          case 'map_verification': return item.admin_notes.includes('‡∏ï‡∏¥‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏°‡∏û');
          case 'phone_verification': return item.admin_notes.includes('‡∏ï‡∏¥‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå');
          case 'email_verification': return item.admin_notes.includes('‡∏ï‡∏¥‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏°‡∏•');
          case 'wrong_password': return item.admin_notes.includes('‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏¥‡∏î');
          default: return true;
        }
      });
    }
    
    // Apply search filter
    if (searchTerm.trim()) {
      const searchLower = searchTerm.toLowerCase().trim();
      filtered = filtered.filter(item => {
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß
        if (item.queue_number.toString().includes(searchLower)) return true;
        
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡πÄ‡∏Å‡∏° (roblox_username)
        if (item.roblox_username && item.roblox_username.toLowerCase().includes(searchLower)) return true;
        
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
        if (item.customer_name && item.customer_name.toLowerCase().includes(searchLower)) return true;
        
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÉ‡∏ô contact_info
        const phoneMatch = item.contact_info.match(/‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:\s*([^|]+)/)?.[1]?.trim() || 
                          item.contact_info.match(/Phone:\s*([^|]+)/)?.[1]?.trim() ||
                          item.contact_info.match(/(\d{10,})/)?.[1];
        if (phoneMatch && phoneMatch.includes(searchLower)) return true;
        
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡πÄ‡∏Å‡∏°‡πÉ‡∏ô contact_info
        const nameMatch = item.contact_info.match(/‡∏ä‡∏∑‡πà‡∏≠:\s*([^|]+)/)?.[1]?.trim() ||
                         item.contact_info.match(/Username:\s*([^|]+)/)?.[1]?.trim();
        if (nameMatch && nameMatch.toLowerCase().includes(searchLower)) return true;
        
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î
        if (item.assigned_code && item.assigned_code.toLowerCase().includes(searchLower)) return true;
        if (item.assigned_account_code && item.assigned_account_code.toLowerCase().includes(searchLower)) return true;
        
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
        if (item.roblox_password && item.roblox_password.toLowerCase().includes(searchLower)) return true;
        
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å contact_info ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (fallback)
        if (item.contact_info.toLowerCase().includes(searchLower)) return true;
        
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        if (item.status.toLowerCase().includes(searchLower)) return true;
        
        return false;
      });
    }
    
    setFilteredItems(filtered);
  }, [queueItems, activeFilter, problemTypeFilter, searchTerm]);

  const handleEditItem = (item: QueueItem) => {
    setSelectedItem(item);
    setNewStatus(item.status);
    setAdminNotes(item.admin_notes || '');
    setEditDialogOpen(true);
  };

  const handleEditProblemType = (item: QueueItem) => {
    setEditingItem(item);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const currentProblemType = getCurrentProblemType(item.admin_notes || '');
    setNewProblemType(currentProblemType);
    
    setEditProblemDialogOpen(true);
  };

  const getCurrentProblemType = (adminNotes: string) => {
    if (adminNotes.includes('‡∏ï‡∏¥‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏°‡∏û')) return 'map_verification';
    if (adminNotes.includes('‡∏ï‡∏¥‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå')) return 'phone_verification';
    if (adminNotes.includes('‡∏ï‡∏¥‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏°‡∏•')) return 'email_verification';
    if (adminNotes.includes('‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏¥‡∏î')) return 'wrong_password';
    return '';
  };

  const getProblemDescription = (problemType: string) => {
    switch (problemType) {
      case 'map_verification': return '‡∏ï‡∏¥‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏°‡∏û';
      case 'phone_verification': return '‡∏ï‡∏¥‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå';
      case 'email_verification': return '‡∏ï‡∏¥‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏°‡∏•';
      case 'wrong_password': return '‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏¥‡∏î';
      default: return '‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ';
    }
  };

  const handleUpdateProblemType = async () => {
    if (!editingItem || !newProblemType) return;

    setUpdating(true);
    try {
      const problemDescription = getProblemDescription(newProblemType);
      const newAdminNotes = `üö® ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏±‡∏ç‡∏´‡∏≤: ${problemDescription}`;
      
      await updateQueueStatus(editingItem.id, 'problem' as any, newAdminNotes);
      
      toast.success(`‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏õ‡πá‡∏ô: ${problemDescription}`);
      setEditProblemDialogOpen(false);
      setEditingItem(null);
      loadQueueItems();
    } catch (error) {
      console.error('Error updating problem type:', error);
      toast.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏±‡∏ç‡∏´‡∏≤');
    } finally {
      setUpdating(false);
    }
  };

  const handleUpdateStatus = async () => {
    if (!selectedItem || !newStatus) return;

    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤" ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î Dialog ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏±‡∏ç‡∏´‡∏≤
    if (newStatus === 'problem') {
      setEditDialogOpen(false); // ‡∏õ‡∏¥‡∏î dialog ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      setEditingItem(selectedItem); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ß‡πâ
      setNewProblemType(''); // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏±‡∏ç‡∏´‡∏≤
      setEditProblemDialogOpen(true); // ‡πÄ‡∏õ‡∏¥‡∏î dialog ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏±‡∏ç‡∏´‡∏≤
      return;
    }

    setUpdating(true);
    try {
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏¥‡∏ß
      await updateQueueStatus(selectedItem.id, newStatus as any, adminNotes);
      
      // Sync ‡∏Å‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á redemption_requests
      if (selectedItem.redemption_request_id) {
        // ‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏Ç‡∏≠
        let requestStatus = 'pending';
        switch (newStatus) {
          case 'completed':
            requestStatus = 'completed';
            break;
          case 'cancelled':
            requestStatus = 'rejected';
            break;
          case 'processing':
            requestStatus = 'processing';
            break;
          case 'problem':
            requestStatus = 'pending'; // ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏õ‡πá‡∏ô pending ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
            break;
          default:
            requestStatus = 'pending';
        }
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á redemption_requests
        const { error: requestError } = await supabase
          .from('app_284beb8f90_redemption_requests')
          .update({ 
            status: requestStatus,
            admin_notes: adminNotes,
            updated_at: new Date().toISOString()
          })
          .eq('id', selectedItem.redemption_request_id);
          
        if (requestError) {
          console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏î‡πâ:', requestError);
          // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á error ‡πÉ‡∏´‡πâ user ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ñ‡∏¥‡∏ß‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
        } else {
          console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        }
      }
      
      toast.success(`‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏¥‡∏ß #${selectedItem.queue_number} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
      setEditDialogOpen(false);
      loadQueueItems(); // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    } catch (error) {
      console.error('Error updating queue item:', error);
      toast.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ');
    } finally {
      setUpdating(false);
    }
  };

  const handleCancelEdit = () => {
    setEditDialogOpen(false);
    setSelectedItem(null);
    setNewStatus('');
    setAdminNotes('');
  };

  const handleDeleteQueue = (item: QueueItem) => {
    setItemToDelete(item);
    setDeleteDialogOpen(true);
  };

  const confirmDelete = async () => {
    if (!itemToDelete) return;

    setDeleting(true);
    try {
      await deleteQueueItem(itemToDelete.id);
      toast.success(`‡∏•‡∏ö‡∏Ñ‡∏¥‡∏ß #${itemToDelete.queue_number} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
      setDeleteDialogOpen(false);
      setItemToDelete(null);
      loadQueueItems(); // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    } catch (error) {
      console.error('Error deleting queue item:', error);
      toast.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ñ‡∏¥‡∏ß‡πÑ‡∏î‡πâ');
    } finally {
      setDeleting(false);
    }
  };

  // Bulk update functions
  const handleSelectItem = (itemId: string, checked: boolean) => {
    const newSelected = new Set(selectedItems);
    if (checked) {
      newSelected.add(itemId);
    } else {
      newSelected.delete(itemId);
    }
    setSelectedItems(newSelected);
  };

  const handleSelectAll = (checked: boolean) => {
    if (checked) {
      setSelectedItems(new Set(filteredItems.map(item => item.id)));
    } else {
      setSelectedItems(new Set());
    }
  };

  const handleBulkUpdate = async () => {
    if (selectedItems.size === 0 || !bulkStatus) return;

    setBulkUpdating(true);
    try {
      const selectedItemsArray = Array.from(selectedItems);
      let successCount = 0;
      let errorCount = 0;

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏µ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
      for (const itemId of selectedItemsArray) {
        try {
          await updateQueueStatus(itemId, bulkStatus as any, bulkNotes);
          successCount++;
        } catch (error) {
          console.error(`Error updating item ${itemId}:`, error);
          errorCount++;
        }
      }

      if (successCount > 0) {
        toast.success(`‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ${successCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
      }
      if (errorCount > 0) {
        toast.error(`‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ${errorCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß`);
      }

      setBulkUpdateDialogOpen(false);
      setSelectedItems(new Set());
      setBulkStatus('');
      setBulkNotes('');
      loadQueueItems();
    } catch (error) {
      console.error('Error in bulk update:', error);
      toast.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å');
    } finally {
      setBulkUpdating(false);
    }
  };

  const cancelDelete = () => {
    setDeleteDialogOpen(false);
    setItemToDelete(null);
  };

  return (
    <div className="space-y-6">
      {/* Header Card */}
      <Card className="bg-gradient-to-r from-purple-900/50 to-blue-900/50 border-purple-500/30">
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="text-3xl font-bold text-white flex items-center gap-3">
                üéØ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏¥‡∏ß
                <span className="text-sm font-normal text-purple-200 bg-purple-500/20 px-3 py-1 rounded-full">
                  {queueItems.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                </span>
              </CardTitle>
              <p className="text-purple-200 mt-2">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</p>
            </div>
            <Button 
              onClick={loadQueueItems} 
              disabled={loading} 
              variant="outline" 
              className="text-white border-purple-400/50 hover:bg-purple-500/20 hover:border-purple-400 transition-all duration-200"
            >
              <RefreshCw className={`w-4 h-4 mr-2 ${loading ? 'animate-spin' : ''}`} />
              ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
            </Button>
          </div>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-5 gap-6">
            <div className="bg-gradient-to-br from-yellow-500/20 to-orange-500/20 backdrop-blur-sm border border-yellow-400/40 rounded-xl p-6 text-center shadow-lg hover:shadow-yellow-500/20 transition-all duration-300">
              <div className="text-3xl font-bold text-yellow-200 mb-2">{waitingCount}</div>
              <div className="text-sm text-yellow-100 font-medium">‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</div>
              <div className="text-xs text-yellow-200/70 mt-1">‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠</div>
            </div>
            <div className="bg-gradient-to-br from-blue-500/20 to-cyan-500/20 backdrop-blur-sm border border-blue-400/40 rounded-xl p-6 text-center shadow-lg hover:shadow-blue-500/20 transition-all duration-300">
              <div className="text-3xl font-bold text-blue-200 mb-2">{processingCount}</div>
              <div className="text-sm text-blue-100 font-medium">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</div>
              <div className="text-xs text-blue-200/70 mt-1">‚ö° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥</div>
            </div>
            <div className="bg-gradient-to-br from-green-500/20 to-emerald-500/20 backdrop-blur-sm border border-green-400/40 rounded-xl p-6 text-center shadow-lg hover:shadow-green-500/20 transition-all duration-300">
              <div className="text-3xl font-bold text-green-200 mb-2">{completedCount}</div>
              <div className="text-sm text-green-100 font-medium">‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô</div>
              <div className="text-xs text-green-200/70 mt-1">‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢</div>
            </div>
            <div className="bg-gradient-to-br from-purple-500/20 to-pink-500/20 backdrop-blur-sm border border-purple-400/40 rounded-xl p-6 text-center shadow-lg hover:shadow-purple-500/20 transition-all duration-300">
              <div className="text-3xl font-bold text-purple-200 mb-2">{queueItems.length}</div>
              <div className="text-sm text-purple-100 font-medium">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
              <div className="text-xs text-purple-200/70 mt-1">üìä ‡∏™‡∏£‡∏∏‡∏õ</div>
            </div>
            <div className="bg-gradient-to-br from-red-500/20 to-pink-500/20 backdrop-blur-sm border border-red-400/40 rounded-xl p-6 text-center shadow-lg hover:shadow-red-500/20 transition-all duration-300">
              <div className="text-3xl font-bold text-red-200 mb-2">{cancelledCount}</div>
              <div className="text-sm text-red-100 font-medium">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</div>
              <div className="text-xs text-red-200/70 mt-1">‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß</div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Search and Filter Section */}
      <Card className="bg-gradient-to-br from-gray-900/80 to-gray-800/80 border-gray-700/50">
        <CardContent className="pt-6">
          <div className="space-y-4">
            {/* Search Bar */}
            <div className="relative">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <Search className="h-5 w-5 text-gray-400" />
              </div>
              <input
                type="text"
                placeholder="üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏¥‡∏ß... (‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß, ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡πÄ‡∏Å‡∏°, ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£, ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô, ‡πÇ‡∏Ñ‡πâ‡∏î)"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-10 py-3 bg-gray-800/50 border border-gray-600/50 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500/50 transition-all duration-200"
              />
              {searchTerm && (
                <button
                  onClick={() => setSearchTerm('')}
                  className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-white transition-colors duration-200"
                >
                  <X className="h-5 w-5" />
                </button>
              )}
            </div>
            
            {/* Search Tips */}
            <div className="text-sm text-gray-400 bg-gray-800/30 rounded-lg p-3 border border-gray-700/50">
              <div className="flex items-center gap-2 mb-2">
                <span className="text-yellow-400">üí°</span>
                <span className="font-medium text-yellow-300">‡∏ß‡∏¥‡∏ò‡∏µ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏¥‡∏ß:</span>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-2 text-xs">
                <div className="flex items-center gap-2">
                  <span className="text-blue-400">üé´</span>
                  <span>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß: <code className="bg-gray-700/50 px-1 rounded">#123</code></span>
                </div>
                <div className="flex items-center gap-2">
                  <span className="text-green-400">üë§</span>
                  <span>‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡πÄ‡∏Å‡∏°: <code className="bg-gray-700/50 px-1 rounded">PlayerName</code></span>
                </div>
                <div className="flex items-center gap-2">
                  <span className="text-purple-400">üì±</span>
                  <span>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: <code className="bg-gray-700/50 px-1 rounded">0821695505</code></span>
                </div>
                <div className="flex items-center gap-2">
                  <span className="text-orange-400">üé´</span>
                  <span>‡πÇ‡∏Ñ‡πâ‡∏î: <code className="bg-gray-700/50 px-1 rounded">50BXJK258J</code></span>
                </div>
              </div>
            </div>
            
            {/* Filter Buttons */}
            <div className="flex flex-wrap gap-2 justify-center">
            <Button
              onClick={() => setActiveFilter('all')}
              variant={activeFilter === 'all' ? 'default' : 'outline'}
              className={`${
                activeFilter === 'all'
                  ? 'bg-purple-500 hover:bg-purple-600 text-white'
                  : 'text-white border-purple-400/50 hover:bg-purple-500/20'
              } transition-all duration-200`}
            >
              üìä ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ({queueItems.length})
            </Button>
            <Button
              onClick={() => setActiveFilter('waiting')}
              variant={activeFilter === 'waiting' ? 'default' : 'outline'}
              className={`${
                activeFilter === 'waiting'
                  ? 'bg-yellow-500 hover:bg-yellow-600 text-white'
                  : 'text-white border-yellow-400/50 hover:bg-yellow-500/20'
              } transition-all duration-200`}
            >
              ‚è≥ ‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ ({waitingCount})
            </Button>
            <Button
              onClick={() => setActiveFilter('processing')}
              variant={activeFilter === 'processing' ? 'default' : 'outline'}
              className={`${
                activeFilter === 'processing'
                  ? 'bg-blue-500 hover:bg-blue-600 text-white'
                  : 'text-white border-blue-400/50 hover:bg-blue-500/20'
              } transition-all duration-200`}
            >
              ‚ö° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ ({processingCount})
            </Button>
            <Button
              onClick={() => setActiveFilter('completed')}
              variant={activeFilter === 'completed' ? 'default' : 'outline'}
              className={`${
                activeFilter === 'completed'
                  ? 'bg-green-500 hover:bg-green-600 text-white'
                  : 'text-white border-green-400/50 hover:bg-green-500/20'
              } transition-all duration-200`}
            >
              ‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ({completedCount})
            </Button>
            <Button
              onClick={() => setActiveFilter('cancelled')}
              variant={activeFilter === 'cancelled' ? 'default' : 'outline'}
              className={`${
                activeFilter === 'cancelled'
                  ? 'bg-red-500 hover:bg-red-600 text-white'
                  : 'text-white border-red-400/50 hover:bg-red-500/20'
              } transition-all duration-200`}
            >
              ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ({cancelledCount})
            </Button>
            <Button
              onClick={() => setActiveFilter('problem')}
              variant={activeFilter === 'problem' ? 'default' : 'outline'}
              className={`${
                activeFilter === 'problem'
                  ? 'bg-orange-500 hover:bg-orange-600 text-white'
                  : 'text-white border-orange-400/50 hover:bg-orange-500/20'
              } transition-all duration-200`}
            >
              ‚ö†Ô∏è ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ({problemCount})
            </Button>
            <Button
              onClick={() => setActiveFilter('customer_fixed')}
              variant={activeFilter === 'customer_fixed' ? 'default' : 'outline'}
              className={`${
                activeFilter === 'customer_fixed'
                  ? 'bg-emerald-500 hover:bg-emerald-600 text-white'
                  : 'text-white border-emerald-400/50 hover:bg-emerald-500/20'
              } transition-all duration-200`}
            >
              ‚úÖ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß ({customerFixedCount})
            </Button>
            </div>
          </div>
          
          {/* Problem Type Filter - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å filter 'problem' */}
          {activeFilter === 'problem' && (
            <div className="mt-4 pt-4 border-t border-white/20">
              <div className="flex items-center gap-2 mb-3">
                <span className="text-white font-medium">üîç ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏±‡∏ç‡∏´‡∏≤:</span>
              </div>
              <div className="flex flex-wrap gap-2">
                <Button
                  onClick={() => setProblemTypeFilter('all')}
                  variant={problemTypeFilter === 'all' ? 'default' : 'outline'}
                  className={`${
                    problemTypeFilter === 'all'
                      ? 'bg-purple-500 hover:bg-purple-600 text-white'
                      : 'text-white border-purple-400/50 hover:bg-purple-500/20'
                  } transition-all duration-200 text-xs px-3 py-1`}
                >
                  ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ({problemCount})
                </Button>
                <Button
                  onClick={() => setProblemTypeFilter('map_verification')}
                  variant={problemTypeFilter === 'map_verification' ? 'default' : 'outline'}
                  className={`${
                    problemTypeFilter === 'map_verification'
                      ? 'bg-blue-500 hover:bg-blue-600 text-white'
                      : 'text-white border-blue-400/50 hover:bg-blue-500/20'
                  } transition-all duration-200 text-xs px-3 py-1`}
                >
                  üó∫Ô∏è ‡∏ï‡∏¥‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏°‡∏û ({mapVerificationCount})
                </Button>
                <Button
                  onClick={() => setProblemTypeFilter('phone_verification')}
                  variant={problemTypeFilter === 'phone_verification' ? 'default' : 'outline'}
                  className={`${
                    problemTypeFilter === 'phone_verification'
                      ? 'bg-green-500 hover:bg-green-600 text-white'
                      : 'text-white border-green-400/50 hover:bg-green-500/20'
                  } transition-all duration-200 text-xs px-3 py-1`}
                >
                  üì± ‡∏ï‡∏¥‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå ({phoneVerificationCount})
                </Button>
                <Button
                  onClick={() => setProblemTypeFilter('email_verification')}
                  variant={problemTypeFilter === 'email_verification' ? 'default' : 'outline'}
                  className={`${
                    problemTypeFilter === 'email_verification'
                      ? 'bg-purple-500 hover:bg-purple-600 text-white'
                      : 'text-white border-purple-400/50 hover:bg-purple-500/20'
                  } transition-all duration-200 text-xs px-3 py-1`}
                >
                  üìß ‡∏ï‡∏¥‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏°‡∏• ({emailVerificationCount})
                </Button>
                <Button
                  onClick={() => setProblemTypeFilter('wrong_password')}
                  variant={problemTypeFilter === 'wrong_password' ? 'default' : 'outline'}
                  className={`${
                    problemTypeFilter === 'wrong_password'
                      ? 'bg-red-500 hover:bg-red-600 text-white'
                      : 'text-white border-red-400/50 hover:bg-red-500/20'
                  } transition-all duration-200 text-xs px-3 py-1`}
                >
                  üîí ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏¥‡∏î ({wrongPasswordCount})
                </Button>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Queue Table Card */}
      <Card className="bg-gradient-to-br from-gray-900/80 to-gray-800/80 border-gray-700/50">
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle className="text-white text-xl font-semibold flex items-center gap-2">
              üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
              <span className="text-sm font-normal text-gray-400 bg-gray-700/50 px-2 py-1 rounded-md">
                {filteredItems.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
              </span>
              {searchTerm && (
                <span className="text-sm font-normal text-blue-400 bg-blue-500/20 px-2 py-1 rounded-md">
                  üîç ‡∏û‡∏ö {filteredItems.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "{searchTerm}"
                </span>
              )}
              {selectedItems.size > 0 && (
                <span className="text-sm font-normal text-green-400 bg-green-500/20 px-2 py-1 rounded-md">
                  ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß {selectedItems.size} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                </span>
              )}
            </CardTitle>
            
            {/* Bulk Update Section */}
            {filteredItems.length > 0 && (
              <div className="flex items-center gap-3">
                <div className="flex items-center gap-2">
                  <Checkbox
                    checked={selectedItems.size === filteredItems.length && filteredItems.length > 0}
                    onCheckedChange={handleSelectAll}
                    className="border-purple-400 data-[state=checked]:bg-purple-500 data-[state=checked]:border-purple-500"
                  />
                  <span className="text-sm text-purple-200">
                    ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                  </span>
                </div>
                
                {selectedItems.size > 0 && (
                  <Dialog open={bulkUpdateDialogOpen} onOpenChange={setBulkUpdateDialogOpen}>
                    <DialogTrigger asChild>
                      <Button
                        className="bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white border-green-500/30"
                      >
                        <CheckSquare className="w-4 h-4 mr-2" />
                        ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï {selectedItems.size} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                      </Button>
                    </DialogTrigger>
                  </Dialog>
                )}
              </div>
            )}
          </div>
        </CardHeader>
        <CardContent>
          {loading ? (
            <div className="text-center py-12">
              <div className="animate-spin rounded-full h-12 w-12 border-4 border-purple-400 border-t-transparent mx-auto"></div>
              <p className="mt-4 text-white text-lg">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
              <p className="text-gray-400 text-sm">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà</p>
            </div>
          ) : filteredItems.length === 0 ? (
            <div className="text-center py-12">
              <div className="text-6xl mb-4">üì≠</div>
              <p className="text-white text-lg font-medium">
                {searchTerm ? (
                  <>
                    ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö "{searchTerm}"
                  </>
                ) : (
                  activeFilter === 'all' ? '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏¥‡∏ß‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' : `‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà${activeFilter === 'waiting' ? '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£' : activeFilter === 'processing' ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£' : activeFilter === 'completed' ? '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô' : activeFilter === 'cancelled' ? '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å' : '‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤'}`
                )}
              </p>
              <p className="text-gray-400 text-sm">
                {searchTerm ? (
                  <>
                    ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢: ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß, ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡πÄ‡∏Å‡∏°, ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£, ‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏Ñ‡πâ‡∏î
                    <br />
                    <button 
                      onClick={() => setSearchTerm('')}
                      className="text-blue-400 hover:text-blue-300 underline mt-2"
                    >
                      ‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
                    </button>
                  </>
                ) : (
                  activeFilter === 'all' ? '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß' : '‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô filter ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà'
                )}
              </p>
            </div>
          ) : (
            <div className="overflow-x-auto rounded-lg border border-gray-700/50">
              <Table className="[&_td]:py-4 [&_th]:py-4">
                <TableHeader>
                  <TableRow className="bg-gradient-to-r from-purple-900/30 to-blue-900/30 border-gray-700/50">
                    <TableHead className="text-white font-semibold text-center w-12">‚òëÔ∏è</TableHead>
                    <TableHead className="text-white font-semibold text-center">üé´ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß</TableHead>
                    <TableHead className="text-white font-semibold">üë§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</TableHead>
                    <TableHead className="text-white font-semibold text-center">üì¶ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</TableHead>
                    <TableHead className="text-white font-semibold text-center">üè∑Ô∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</TableHead>
                    <TableHead className="text-white font-semibold text-center">üö® ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏±‡∏ç‡∏´‡∏≤</TableHead>
                    <TableHead className="text-white font-semibold text-center">üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á</TableHead>
                    <TableHead className="text-white font-semibold text-center">‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredItems.map((item) => {
                    const statusInfo = getStatusInfo(item.status);
                    const productInfo = getProductTypeInfo(item.product_type);
                    
                    return (
                      <TableRow key={item.id} className="hover:bg-gray-800/50 transition-colors duration-200 border-gray-700/30">
                        <TableCell className="text-center">
                          <Checkbox
                            checked={selectedItems.has(item.id)}
                            onCheckedChange={(checked) => handleSelectItem(item.id, checked as boolean)}
                            className="border-purple-400 data-[state=checked]:bg-purple-500 data-[state=checked]:border-purple-500"
                          />
                        </TableCell>
                        <TableCell className="text-center">
                          <div className="bg-gradient-to-r from-purple-500/20 to-blue-500/20 rounded-lg p-3 border border-purple-400/30">
                            <div className="text-xl font-bold text-white">#{item.queue_number}</div>
                          </div>
                        </TableCell>
                        <TableCell>
                          <div className="space-y-2">
                            <div className="flex items-center gap-2">
                              <div className="w-2 h-2 bg-green-400 rounded-full"></div>
                              <div className="font-semibold text-white text-lg">
                                ‡∏Ñ‡∏¥‡∏ß #{item.queue_number}
                              </div>
                            </div>
                            
                            {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ */}
                            <div className="text-sm text-gray-300 bg-gray-800/50 rounded-md p-2">
                              üì± {item.contact_info}
                            </div>
                            
                            {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° */}
                            <div className="space-y-1">
                              {(item.roblox_username || item.customer_name) && (
                                <div className="text-xs text-blue-300 bg-blue-500/10 rounded px-2 py-1 inline-block">
                                  üë§ {item.roblox_username || item.customer_name}
                                </div>
                              )}
                              {item.roblox_password && (
                                <div className="text-xs text-yellow-300 bg-yellow-500/10 rounded px-2 py-1 inline-block">
                                  üîí {item.roblox_password}
                                </div>
                              )}
                              {item.robux_amount && (
                                <div className="text-xs text-green-300 bg-green-500/10 rounded px-2 py-1 inline-block">
                                  üíé {item.robux_amount} Robux
                                </div>
                              )}
                              {item.assigned_code && (
                                <div className="text-xs text-purple-300 bg-purple-500/10 rounded px-2 py-1 inline-block">
                                  üé´ Code: {item.assigned_code}
                                </div>
                              )}
                              {!item.assigned_code && item.roblox_username && (
                                <div className="text-xs text-red-300 bg-red-500/10 rounded px-2 py-1 inline-block">
                                  ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î
                                </div>
                              )}
                              {item.assigned_account_code && (
                                <div className="text-xs text-orange-300 bg-orange-500/10 rounded px-2 py-1 inline-block">
                                  üîë Account: {item.assigned_account_code}
                                </div>
                              )}
                            </div>
                          </div>
                        </TableCell>
                        <TableCell className="text-center">
                          <div className="bg-gradient-to-r from-gray-700/50 to-gray-600/50 rounded-lg p-3 border border-gray-600/30">
                            <div className="flex flex-col items-center gap-1">
                              <span className="text-2xl">{productInfo.icon}</span>
                              <span className="text-white text-sm font-medium">{productInfo.name}</span>
                            </div>
                          </div>
                        </TableCell>
                        <TableCell className="text-center">
                          <Badge className={`${statusInfo.color} text-white px-4 py-2 rounded-full shadow-lg`}>
                            <div className="flex items-center gap-2">
                              {statusInfo.icon}
                              <span className="font-medium">{statusInfo.text}</span>
                            </div>
                          </Badge>
                        </TableCell>
                        <TableCell className="text-center">
                          {item.status === 'problem' && item.admin_notes ? (
                            <div className="flex items-center justify-center gap-2">
                              <div className="text-xs px-3 py-2 rounded-lg text-orange-300 bg-orange-900/30 border border-orange-500/30">
                                {item.admin_notes.includes('‡∏ï‡∏¥‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏°‡∏û') && 'üó∫Ô∏è ‡∏ï‡∏¥‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏°‡∏û'}
                                {item.admin_notes.includes('‡∏ï‡∏¥‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå') && 'üì± ‡∏ï‡∏¥‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå'}
                                {item.admin_notes.includes('‡∏ï‡∏¥‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏°‡∏•') && 'üìß ‡∏ï‡∏¥‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏°‡∏•'}
                                {item.admin_notes.includes('‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏¥‡∏î') && 'üîí ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏¥‡∏î'}
                                {!item.admin_notes.includes('‡∏ï‡∏¥‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏°‡∏û') && 
                                 !item.admin_notes.includes('‡∏ï‡∏¥‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå') && 
                                 !item.admin_notes.includes('‡∏ï‡∏¥‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏°‡∏•') && 
                                 !item.admin_notes.includes('‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏¥‡∏î') && 
                                 '‚ùì ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ'}
                              </div>
                              <Button
                                onClick={() => handleEditProblemType(item)}
                                size="sm"
                                variant="outline"
                                className="h-6 w-6 p-0 border-orange-400 text-orange-400 hover:bg-orange-500 hover:text-white"
                                title="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏±‡∏ç‡∏´‡∏≤"
                              >
                                <Edit className="h-3 w-3" />
                              </Button>
                            </div>
                          ) : (
                            <span className="text-gray-400 text-xs">-</span>
                          )}
                        </TableCell>
                        <TableCell className="text-center">
                          <div className="bg-gray-800/50 rounded-lg p-3 border border-gray-700/30">
                            <div className="text-sm text-white font-medium">
                              {formatDate(item.created_at)}
                            </div>
                          </div>
                        </TableCell>
                        <TableCell className="text-center">
                          <div className="flex flex-col items-center gap-2">
                            <div className="flex gap-2">
                              <Button
                                onClick={() => handleEditItem(item)}
                                size="sm"
                                variant="outline"
                                className="text-white border-purple-400/50 hover:bg-purple-500/20 hover:border-purple-400 transition-all duration-200 px-3"
                              >
                                <Edit className="w-4 h-4 mr-1" />
                                ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                              </Button>
                              <Button
                                onClick={() => handleDeleteQueue(item)}
                                size="sm"
                                variant="outline"
                                className="text-white border-red-400/50 hover:bg-red-500/20 hover:border-red-400 transition-all duration-200 px-3"
                              >
                                <Trash2 className="w-4 h-4 mr-1" />
                                ‡∏•‡∏ö
                              </Button>
                            </div>
                            {item.admin_notes && (
                              <div className="flex items-center gap-1 text-yellow-300 text-xs bg-yellow-500/10 rounded px-2 py-1">
                                <MessageSquare className="w-3 h-3" />
                                <span>‡∏°‡∏µ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</span>
                              </div>
                            )}
                          </div>
                        </TableCell>
                      </TableRow>
                    );
                  })}
                </TableBody>
              </Table>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Dialog ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ */}
      <Dialog open={editDialogOpen} onOpenChange={setEditDialogOpen}>
        <DialogContent className="bg-gradient-to-br from-gray-900 to-gray-800 text-white border border-purple-500/30 shadow-2xl">
          <DialogHeader>
            <DialogTitle className="text-white text-xl font-bold flex items-center gap-3">
              ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏¥‡∏ß #{selectedItem?.queue_number}
              <div className="bg-gradient-to-r from-purple-500/20 to-blue-500/20 px-3 py-1 rounded-full text-sm font-normal">
                üë§ {selectedItem?.roblox_username || selectedItem?.customer_name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
              </div>
            </DialogTitle>
            <DialogDescription className="text-gray-300 text-base">
              ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-4">
            <div>
              <Label className="text-white">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</Label>
              <Select value={newStatus} onValueChange={setNewStatus}>
                <SelectTrigger className="bg-white/10 border-white/30 text-white">
                  <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" />
                </SelectTrigger>
                <SelectContent className="bg-gray-800 border-white/30">
                  <SelectItem value="waiting" className="text-white hover:bg-gray-700">
                    <div className="flex items-center gap-2">
                      <Clock className="w-4 h-4" />
                      ‡∏£‡∏≠‡∏Ñ‡∏¥‡∏ß
                    </div>
                  </SelectItem>
                  <SelectItem value="processing" className="text-white hover:bg-gray-700">
                    <div className="flex items-center gap-2">
                      <Play className="w-4 h-4" />
                      ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
                    </div>
                  </SelectItem>
                  <SelectItem value="completed" className="text-white hover:bg-gray-700">
                    <div className="flex items-center gap-2">
                      <CheckCircle className="w-4 h-4" />
                      ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
                    </div>
                  </SelectItem>
                  <SelectItem value="cancelled" className="text-white hover:bg-gray-700">
                    <div className="flex items-center gap-2">
                      <XCircle className="w-4 h-4" />
                      ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                    </div>
                  </SelectItem>
                  <SelectItem value="problem" className="text-white hover:bg-gray-700">
                    <div className="flex items-center gap-2">
                      <AlertCircle className="w-4 h-4" />
                      ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
                    </div>
                  </SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div>
              <Label className="text-white">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤)</Label>
              <Textarea
                value={adminNotes}
                onChange={(e) => setAdminNotes(e.target.value)}
                placeholder="‡πÉ‡∏™‡πà‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏¥‡∏ß‡∏ñ‡∏π‡∏Å‡∏Ç‡πâ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å..."
                className="bg-white/10 border-white/30 text-white placeholder:text-gray-400 min-h-[100px]"
              />
              <p className="text-sm text-gray-400 mt-1">
                ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏¥‡∏ß
              </p>
            </div>

            {selectedItem && (
              <div className="bg-white/5 rounded-lg p-3">
                <h4 className="font-semibold text-white mb-2">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:</h4>
                <div className="text-sm text-gray-300 space-y-1">
                  <p><strong>‡∏ä‡∏∑‡πà‡∏≠:</strong> {selectedItem.roblox_username || selectedItem.customer_name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</p>
                  <p><strong>‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠:</strong> {selectedItem.contact_info}</p>
                  <p><strong>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:</strong> {getProductTypeInfo(selectedItem.product_type).name}</p>
                  {selectedItem.roblox_username && (
                    <p><strong>Roblox Username:</strong> {selectedItem.roblox_username}</p>
                  )}
                  {selectedItem.roblox_password && (
                    <p><strong>‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô:</strong> {selectedItem.roblox_password}</p>
                  )}
                  
                  {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡πà‡∏á‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) */}
                  {selectedItem.customer_updated_credentials && (
                    <div className="mt-3 p-3 bg-blue-500/10 border border-blue-500/30 rounded-lg">
                      <h5 className="font-semibold text-blue-300 mb-2 flex items-center gap-2">
                        <span>üìù</span>
                        ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡πà‡∏á‡∏°‡∏≤:
                      </h5>
                      <div className="space-y-2 text-blue-200">
                        {selectedItem.customer_updated_credentials.username && (
                          <p><strong>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà:</strong> {selectedItem.customer_updated_credentials.username}</p>
                        )}
                        {selectedItem.customer_updated_credentials.password && (
                          <p><strong>‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà:</strong> {selectedItem.customer_updated_credentials.password}</p>
                        )}
                        {(selectedItem.customer_updated_credentials as any)?.game_history_image && (
                          <div className="space-y-2">
                            <p className="font-semibold text-blue-300">üñºÔ∏è ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô:</p>
                            <img
                              src={(selectedItem.customer_updated_credentials as any).game_history_image}
                              alt="Game History"
                              className="w-full max-h-96 object-contain rounded-lg border-2 border-blue-400/50 cursor-pointer hover:border-blue-400"
                              onClick={() => window.open((selectedItem.customer_updated_credentials as any)?.game_history_image, '_blank')}
                              title="‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏π‡∏õ‡πÄ‡∏ï‡πá‡∏°‡∏Ç‡∏ô‡∏≤‡∏î"
                            />
                            <p className="text-xs text-blue-300/70">üí° ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏£‡∏π‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ï‡πá‡∏°</p>
                          </div>
                        )}
                        {selectedItem.customer_updated_credentials.old_username && (
                          <p className="text-xs opacity-70"><strong>‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏°:</strong> {selectedItem.customer_updated_credentials.old_username}</p>
                        )}
                        <p className="text-xs opacity-70">
                          <strong>‡∏™‡πà‡∏á‡∏°‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠:</strong> {new Date(selectedItem.customer_updated_credentials.uploaded_at).toLocaleString('th-TH')}
                        </p>
                      </div>
                    </div>
                  )}
                  
                  {/* ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å contact_info */}
                  {selectedItem.contact_info && (
                    <>
                      {selectedItem.contact_info.includes('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:') && (
                        <p><strong>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:</strong> {selectedItem.contact_info.match(/‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:\s*([^|]+)/)?.[1]?.trim() || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</p>
                      )}
                      {selectedItem.contact_info.includes('Password:') && (
                        <p><strong>‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô:</strong> {selectedItem.contact_info.match(/Password:\s*([^|]+)/)?.[1]?.trim() || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</p>
                      )}
                      {selectedItem.contact_info.includes('Code:') && (
                        <p><strong>‡πÇ‡∏Ñ‡πâ‡∏î:</strong> {selectedItem.contact_info.match(/Code:\s*([^|]+)/)?.[1]?.trim() || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</p>
                      )}
                    </>
                  )}
                  {selectedItem.robux_amount && (
                    <p><strong>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Robux:</strong> {selectedItem.robux_amount}</p>
                  )}
                  {selectedItem.assigned_code && (
                    <p><strong>‡πÇ‡∏Ñ‡πâ‡∏î:</strong> {selectedItem.assigned_code}</p>
                  )}
                  {selectedItem.assigned_account_code && (
                    <p><strong>Account Code:</strong> {selectedItem.assigned_account_code}</p>
                  )}
                  <p><strong>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á:</strong> {formatDate(selectedItem.created_at)}</p>
                </div>
              </div>
            )}
          </div>

          <DialogFooter>
            <Button
              onClick={handleCancelEdit}
              variant="outline"
              className="text-white border-white/30 hover:bg-white/10"
            >
              ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </Button>
            <Button
              onClick={handleUpdateStatus}
              disabled={updating || !newStatus}
              className="bg-blue-600 hover:bg-blue-700 text-white"
            >
              {updating ? (
                <div className="flex items-center gap-2">
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï...
                </div>
              ) : (
                '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Delete Confirmation Dialog */}
      <Dialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>
        <DialogContent className="bg-gray-900 border-red-500/30">
          <DialogHeader>
            <DialogTitle className="text-red-400 flex items-center gap-2">
              <Trash2 className="w-5 h-5" />
              ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ñ‡∏¥‡∏ß
            </DialogTitle>
            <DialogDescription className="text-gray-300">
              ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏Ñ‡∏¥‡∏ß #{itemToDelete?.queue_number} ‡∏Ç‡∏≠‡∏á {itemToDelete?.roblox_username || itemToDelete?.customer_name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}?
              <br />
              <span className="text-red-400 font-semibold">‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ!</span>
            </DialogDescription>
          </DialogHeader>
          <DialogFooter className="gap-2">
            <Button
              onClick={cancelDelete}
              variant="outline"
              className="border-gray-500 text-gray-300 hover:bg-gray-700"
              disabled={deleting}
            >
              ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </Button>
            <Button
              onClick={confirmDelete}
              disabled={deleting}
              className="bg-red-600 hover:bg-red-700 text-white"
            >
              {deleting ? (
                <div className="flex items-center gap-2">
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö...
                </div>
              ) : (
                <div className="flex items-center gap-2">
                  <Trash2 className="w-4 h-4" />
                  ‡∏•‡∏ö‡∏Ñ‡∏¥‡∏ß
                </div>
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Bulk Update Dialog */}
      <Dialog open={bulkUpdateDialogOpen} onOpenChange={setBulkUpdateDialogOpen}>
        <DialogContent className="bg-gray-900 border-green-500/30 max-w-md">
          <DialogHeader>
            <DialogTitle className="text-green-400 flex items-center gap-2">
              <CheckSquare className="w-5 h-5" />
              ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å
            </DialogTitle>
            <DialogDescription className="text-gray-300">
              ‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á <span className="text-green-400 font-semibold">{selectedItems.size} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</span>
              <br />
              ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-4">
            <div>
              <Label htmlFor="bulk-status" className="text-white font-medium">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà</Label>
              <Select value={bulkStatus} onValueChange={setBulkStatus}>
                <SelectTrigger className="bg-gray-800 border-gray-600 text-white">
                  <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞..." />
                </SelectTrigger>
                <SelectContent className="bg-gray-800 border-gray-600">
                  <SelectItem value="waiting" className="text-yellow-400 hover:bg-gray-700">
                    ‚è≥ ‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
                  </SelectItem>
                  <SelectItem value="processing" className="text-blue-400 hover:bg-gray-700">
                    ‚ö° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
                  </SelectItem>
                  <SelectItem value="completed" className="text-green-400 hover:bg-gray-700">
                    ‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
                  </SelectItem>
                  <SelectItem value="cancelled" className="text-red-400 hover:bg-gray-700">
                    ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                  </SelectItem>
                  <SelectItem value="problem" className="text-orange-400 hover:bg-gray-700">
                    ‚ö†Ô∏è ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
                  </SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div>
              <Label htmlFor="bulk-notes" className="text-white font-medium">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)</Label>
              <Textarea
                id="bulk-notes"
                placeholder="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï..."
                value={bulkNotes}
                onChange={(e) => setBulkNotes(e.target.value)}
                className="bg-gray-800 border-gray-600 text-white placeholder-gray-400 min-h-[80px]"
              />
            </div>
          </div>
          
          <DialogFooter className="gap-2">
            <Button
              onClick={() => setBulkUpdateDialogOpen(false)}
              variant="outline"
              className="border-gray-500 text-gray-300 hover:bg-gray-700"
              disabled={bulkUpdating}
            >
              ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </Button>
            <Button
              onClick={handleBulkUpdate}
              disabled={bulkUpdating || !bulkStatus}
              className="bg-green-600 hover:bg-green-700 text-white"
            >
              {bulkUpdating ? (
                <div className="flex items-center gap-2">
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï...
                </div>
              ) : (
                <div className="flex items-center gap-2">
                  <CheckSquare className="w-4 h-4" />
                  ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï {selectedItems.size} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                </div>
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Edit Problem Type Dialog */}
      <Dialog open={editProblemDialogOpen} onOpenChange={setEditProblemDialogOpen}>
        <DialogContent className="sm:max-w-lg bg-gradient-to-br from-gray-900 to-gray-800 border border-orange-500/30">
          <DialogHeader>
            <DialogTitle className="text-white text-xl font-semibold flex items-center gap-2">
              <Edit className="w-5 h-5 text-orange-400" />
              ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏±‡∏ç‡∏´‡∏≤
            </DialogTitle>
            <DialogDescription className="text-gray-300">
              ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏¥‡∏ß #{editingItem?.queue_number}
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-3 py-4">
            <Button
              onClick={() => setNewProblemType('map_verification')}
              variant="outline"
              className={`w-full px-5 py-4 h-auto text-left justify-start border-2 transition-all ${
                newProblemType === 'map_verification' 
                  ? 'border-blue-500 bg-blue-500/10 text-white' 
                  : 'border-gray-700 hover:border-blue-400 text-gray-300 hover:bg-blue-500/20 hover:text-white'
              }`}
            >
              <div className="flex items-center gap-4">
                <div className="w-12 h-12 rounded-lg bg-blue-500/20 flex items-center justify-center flex-shrink-0">
                  <span className="text-2xl">üó∫Ô∏è</span>
                </div>
                <div className="flex-1 min-w-0">
                  <div className="font-semibold text-base mb-1">‡∏ï‡∏¥‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏°‡∏û</div>
                  <div className="text-xs opacity-70 leading-relaxed">‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏°‡∏û‡πÉ‡∏ô‡πÄ‡∏Å‡∏°</div>
                </div>
              </div>
            </Button>

            <Button
              onClick={() => setNewProblemType('phone_verification')}
              variant="outline"
              className={`w-full px-5 py-4 h-auto text-left justify-start border-2 transition-all ${
                newProblemType === 'phone_verification' 
                  ? 'border-green-500 bg-green-500/10 text-white' 
                  : 'border-gray-700 hover:border-green-400 text-gray-300 hover:bg-green-500/20 hover:text-white'
              }`}
            >
              <div className="flex items-center gap-4">
                <div className="w-12 h-12 rounded-lg bg-green-500/20 flex items-center justify-center flex-shrink-0">
                  <span className="text-2xl">üì±</span>
                </div>
                <div className="flex-1 min-w-0">
                  <div className="font-semibold text-base mb-1">‡∏ï‡∏¥‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå</div>
                  <div className="text-xs opacity-70 leading-relaxed">‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå</div>
                </div>
              </div>
            </Button>

            <Button
              onClick={() => setNewProblemType('email_verification')}
              variant="outline"
              className={`w-full px-5 py-4 h-auto text-left justify-start border-2 transition-all ${
                newProblemType === 'email_verification' 
                  ? 'border-purple-500 bg-purple-500/10 text-white' 
                  : 'border-gray-700 hover:border-purple-400 text-gray-300 hover:bg-purple-500/20 hover:text-white'
              }`}
            >
              <div className="flex items-center gap-4">
                <div className="w-12 h-12 rounded-lg bg-purple-500/20 flex items-center justify-center flex-shrink-0">
                  <span className="text-2xl">üìß</span>
                </div>
                <div className="flex-1 min-w-0">
                  <div className="font-semibold text-base mb-1">‡∏ï‡∏¥‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏°‡∏•</div>
                  <div className="text-xs opacity-70 leading-relaxed">‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•</div>
                </div>
              </div>
            </Button>

            <Button
              onClick={() => setNewProblemType('wrong_password')}
              variant="outline"
              className={`w-full px-5 py-4 h-auto text-left justify-start border-2 transition-all ${
                newProblemType === 'wrong_password' 
                  ? 'border-red-500 bg-red-500/10 text-white' 
                  : 'border-gray-700 hover:border-red-400 text-gray-300 hover:bg-red-500/20 hover:text-white'
              }`}
            >
              <div className="flex items-center gap-4">
                <div className="w-12 h-12 rounded-lg bg-red-500/20 flex items-center justify-center flex-shrink-0">
                  <span className="text-2xl">üîí</span>
                </div>
                <div className="flex-1 min-w-0">
                  <div className="font-semibold text-base mb-1">‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏¥‡∏î</div>
                  <div className="text-xs opacity-70 leading-relaxed">‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á</div>
                </div>
              </div>
            </Button>
          </div>
          
          <DialogFooter className="gap-2">
            <Button
              onClick={() => setEditProblemDialogOpen(false)}
              variant="outline"
              className="border-gray-600 text-gray-300 hover:bg-gray-700"
              disabled={updating}
            >
              ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </Button>
            <Button
              onClick={handleUpdateProblemType}
              disabled={updating || !newProblemType}
              className="bg-orange-600 hover:bg-orange-700 text-white"
            >
              {updating ? (
                <div className="flex items-center gap-2">
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...
                </div>
              ) : (
                <div className="flex items-center gap-2">
                  <CheckCircle className="w-4 h-4" />
                  ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
                </div>
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}
